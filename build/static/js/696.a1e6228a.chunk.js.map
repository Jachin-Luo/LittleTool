{"version":3,"file":"static/js/696.a1e6228a.chunk.js","mappings":"oOAIaA,EAAiB,WAAH,OAASC,EAAAA,EAAAA,KAA0B,EACjDC,EAAkDC,EAAAA,G,UCJlDC,EAAe,SAACC,GAGzB,IAFA,IAAMC,EAAMD,EAAIE,MAAM,GAAGC,MAAM,KACzBC,EAAkC,CAAC,EAChCC,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,IAAK,CACjC,IAAME,EAASN,EAAII,GAAGF,MAAM,KAC5BC,EAAIG,EAAO,IAAMA,EAAO,EAC5B,CACA,OAAOH,CACX,E,mBCJQI,EAAaC,EAAAA,EAAAA,SACN,SAASC,IACpB,IAAMC,EAAWhB,IACjBiB,GAA0CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACrBjB,GAAe,SAACqB,GAC7B,OAAOA,EAAMC,KAAKC,QACtB,IAQA,OAHAC,EAAAA,EAAAA,YAAU,WACNV,EAASW,EAAAA,GACb,GAAG,KAECC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACID,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEC,MAAO,OAAQF,SAAA,CAAC,8CAE1BG,EAAAA,EAAAA,KAACnB,EAAQ,CAACoB,aAAc,SAACC,GAAC,OAVd,SAACA,GACrBZ,EAAiBa,KAAKC,UAAUhC,EAAa8B,EAAEG,OAAOC,QAC1D,CAQ2CC,CAAgBL,EAAE,KACjDF,EAAAA,EAAAA,KAACnB,EAAQ,CAACyB,MAAOjB,QAGrBW,EAAAA,EAAAA,KAAA,UAAQQ,IAAI,uCAAuCC,OAAQ,QAASV,MAAO,aAIvF,C","sources":["store/hooks.ts","utils/formatParmas.ts","views/Home.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './index'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","\r\nexport const formatParmas = (raw: string) => {\r\n    const arr = raw.slice(1).split('&');\r\n    const obj: { [key: string]: string; } = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const subArr = arr[i].split('=');\r\n        obj[subArr[0]] = subArr[1];\r\n    }\r\n    return obj\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useAppDispatch, useAppSelector } from '@/store/hooks'\r\nimport { getDemoDataAsync } from '@/store/modules/demo'\r\nimport { formatParmas } from '@/utils/formatParmas'\r\nimport { Input, Button } from 'antd'\r\nconst { TextArea } = Input;\r\nexport default function Home() {\r\n    const dispatch = useAppDispatch()\r\n    const [transformData, settransformData] = useState('')\r\n    const demoData = useAppSelector((state) => {\r\n        return state.demo.demoData\r\n    })\r\n\r\n    const rowDataOnchange = (e: any) => {\r\n        settransformData(JSON.stringify(formatParmas(e.target.value)))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getDemoDataAsync)\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div style={{ width: '50%' }}>\r\n                转化查询字符串\r\n                <TextArea onPressEnter={(e) => rowDataOnchange(e)}></TextArea>\r\n                <TextArea value={transformData}></TextArea>\r\n\r\n            </div>\r\n            <iframe src=\"https://apihelper.jccore.cn/jsontool\" height={'800px'} width={'1600px'}></iframe>\r\n        </div>\r\n\r\n    )\r\n}\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","formatParmas","raw","arr","slice","split","obj","i","length","subArr","TextArea","Input","Home","dispatch","_useState","useState","_useState2","_slicedToArray","transformData","settransformData","state","demo","demoData","useEffect","getDemoDataAsync","_jsxs","children","style","width","_jsx","onPressEnter","e","JSON","stringify","target","value","rowDataOnchange","src","height"],"sourceRoot":""}